spring.application.name=notification-service

server.port=8084

#mail properties -> from mailtrap.io
spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=008fc3a0975a36
spring.mail.password=4d9cbca9521536

#kafka consumer properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=notification-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.schema.registry.url=http://127.0.0.1:8085
#Enable kafka consumer to convert data to instances of OrderNotificationEvent (Specific Avro Class)
spring.kafka.consumer.properties.specific.avro.reader=true

#loki url
loki.url=http://localhost:3100/loki/api/v1/push

#->exposed endpoints -> prometheus endpoint allows prometheus to scrape app
#->gather the metrics in the form of a histogram and send it to prometheus
#->tag metrics with app name
#->micrometer tracing by default sends 10% of traces to Tempo -> set to 100%
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=notification-service
management.tracing.sampling.probability=1.0